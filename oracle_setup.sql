-- Oracle Database Setup for License Reminder System
-- Run this script as SYS with SYSDBA privileges

-- Create email_reminders table if it doesn't exist
CREATE TABLE "MSMM DASHBOARD".EMAIL_REMINDERS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LICENSE_ID NUMBER NOT NULL,
    REMINDER_TYPE VARCHAR2(50),
    SENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    EMAIL_TO VARCHAR2(500),
    EMAIL_SUBJECT VARCHAR2(500),
    EMAIL_BODY CLOB,
    STATUS VARCHAR2(50) DEFAULT 'sent',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add EMAIL_ENABLED column to LICENSES table if it doesn't exist
-- (Uncomment if needed)
-- ALTER TABLE "MSMM DASHBOARD".LICENSES ADD EMAIL_ENABLED NUMBER(1) DEFAULT 1;

-- Create index for better query performance
CREATE INDEX IDX_EMAIL_REMINDERS_LICENSE_ID ON "MSMM DASHBOARD".EMAIL_REMINDERS(LICENSE_ID);
CREATE INDEX IDX_EMAIL_REMINDERS_SENT_DATE ON "MSMM DASHBOARD".EMAIL_REMINDERS(SENT_DATE);

-- Create view: licenses_needing_reminders
CREATE OR REPLACE VIEW "MSMM DASHBOARD".LICENSES_NEEDING_REMINDERS AS
WITH reminder_status AS (
    SELECT 
        l.LIC_ID as id,
        l.LIC_NAME as lic_name,
        l.LIC_TYPE as lic_type,
        l.LIC_STATE as lic_state,
        l.EXPIRATION_DATE as expiration_date,
        l.LIC_NOTIFY_NAMES as lic_notify_names,
        NVL(l.EMAIL_ENABLED, 1) as email_enabled,
        TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) as days_until_expiration,
        CASE 
            WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 60 THEN '60_days'
            WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 30 THEN '30_days'
            WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 15 THEN '15_days'
            WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 7 THEN '7_days'
            WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 1 THEN '1_day'
            WHEN l.EXPIRATION_DATE < SYSDATE THEN 'overdue_daily'
            ELSE NULL
        END as reminder_type
    FROM "MSMM DASHBOARD".LICENSES l
    WHERE l.EXPIRATION_DATE IS NOT NULL
        AND l.LIC_NOTIFY_NAMES IS NOT NULL
        AND LENGTH(TRIM(l.LIC_NOTIFY_NAMES)) > 0
        AND NVL(l.EMAIL_ENABLED, 1) = 1
        AND (
            TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) IN (60, 30, 15, 7, 1)
            OR l.EXPIRATION_DATE < SYSDATE
        )
),
recent_reminders AS (
    SELECT 
        er.LICENSE_ID,
        er.REMINDER_TYPE,
        MAX(er.SENT_DATE) as last_sent_date
    FROM "MSMM DASHBOARD".EMAIL_REMINDERS er
    WHERE TRUNC(er.SENT_DATE) >= TRUNC(SYSDATE) - 7
    GROUP BY er.LICENSE_ID, er.REMINDER_TYPE
)
SELECT 
    rs.id,
    rs.lic_name,
    rs.lic_type,
    rs.lic_state,
    rs.expiration_date,
    rs.lic_notify_names,
    rs.email_enabled,
    rs.days_until_expiration,
    rs.reminder_type
FROM reminder_status rs
LEFT JOIN recent_reminders rr 
    ON rs.id = rr.LICENSE_ID 
    AND rs.reminder_type = rr.REMINDER_TYPE
    AND (
        (rs.reminder_type IN ('60_days', '30_days', '15_days', '7_days', '1_day') 
         AND TRUNC(rr.last_sent_date) = TRUNC(SYSDATE))
        OR 
        (rs.reminder_type = 'overdue_daily' 
         AND TRUNC(rr.last_sent_date) = TRUNC(SYSDATE))
    )
WHERE rr.LICENSE_ID IS NULL
ORDER BY rs.days_until_expiration, rs.lic_name;

-- Create view: overdue_licenses
CREATE OR REPLACE VIEW "MSMM DASHBOARD".OVERDUE_LICENSES AS
SELECT 
    l.LIC_ID as id,
    l.LIC_NAME as lic_name,
    l.LIC_STATE as lic_state,
    l.LIC_TYPE as lic_type,
    l.LIC_NO as lic_no,
    l.ASCEM_NO as ascem_no,
    l.FIRST_ISSUE_DATE as first_issue_date,
    l.EXPIRATION_DATE as expiration_date,
    l.LIC_NOTIFY_NAMES as lic_notify_names,
    l.CREATED_AT as created_at,
    l.UPDATED_AT as updated_at,
    TRUNC(SYSDATE) - TRUNC(l.EXPIRATION_DATE) as days_overdue
FROM "MSMM DASHBOARD".LICENSES l
WHERE l.EXPIRATION_DATE IS NOT NULL
    AND l.EXPIRATION_DATE < SYSDATE
ORDER BY l.EXPIRATION_DATE;

-- Create view: upcoming_expirations
CREATE OR REPLACE VIEW "MSMM DASHBOARD".UPCOMING_EXPIRATIONS AS
SELECT 
    l.LIC_ID as id,
    l.LIC_NAME as lic_name,
    l.LIC_STATE as lic_state,
    l.LIC_TYPE as lic_type,
    l.LIC_NO as lic_no,
    l.ASCEM_NO as ascem_no,
    l.FIRST_ISSUE_DATE as first_issue_date,
    l.EXPIRATION_DATE as expiration_date,
    l.LIC_NOTIFY_NAMES as lic_notify_names,
    l.CREATED_AT as created_at,
    l.UPDATED_AT as updated_at,
    TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) as days_until_expiration,
    CASE 
        WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) <= 10 THEN 'critical'
        WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) <= 30 THEN 'warning'
        WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) <= 60 THEN 'upcoming'
        ELSE 'normal'
    END as status_category
FROM "MSMM DASHBOARD".LICENSES l
WHERE l.EXPIRATION_DATE IS NOT NULL
    AND l.EXPIRATION_DATE >= SYSDATE
    AND l.EXPIRATION_DATE <= SYSDATE + 90
ORDER BY l.EXPIRATION_DATE;

-- Grant necessary permissions (if needed)
-- GRANT SELECT ON "MSMM DASHBOARD".LICENSES TO your_app_user;
-- GRANT SELECT ON "MSMM DASHBOARD".LICENSES_NEEDING_REMINDERS TO your_app_user;
-- GRANT SELECT ON "MSMM DASHBOARD".OVERDUE_LICENSES TO your_app_user;
-- GRANT SELECT ON "MSMM DASHBOARD".UPCOMING_EXPIRATIONS TO your_app_user;
-- GRANT ALL ON "MSMM DASHBOARD".EMAIL_REMINDERS TO your_app_user;

-- Verify the setup
SELECT 'LICENSES table row count:' as info, COUNT(*) as count FROM "MSMM DASHBOARD".LICENSES
UNION ALL
SELECT 'EMAIL_REMINDERS table created' as info, COUNT(*) as count FROM USER_TABLES WHERE TABLE_NAME = 'EMAIL_REMINDERS'
UNION ALL
SELECT 'Views created' as info, COUNT(*) as count FROM USER_VIEWS WHERE VIEW_NAME IN ('LICENSES_NEEDING_REMINDERS', 'OVERDUE_LICENSES', 'UPCOMING_EXPIRATIONS');