"""
Script to set up Oracle database tables and views for License Reminder System
Run this after confirming Oracle connection works
"""

import os
from dotenv import load_dotenv
import oracledb

# Load environment variables
load_dotenv()


def setup_oracle_database():
    """Create necessary tables and views in Oracle"""
    
    # Get credentials
    host = os.getenv('ORACLE_HOST')
    port = int(os.getenv('ORACLE_PORT', 1521))
    service = os.getenv('ORACLE_SERVICE_NAME')
    password = os.getenv('ORACLE_PASSWORD')
    schema = os.getenv('ORACLE_SCHEMA')
    
    print("Oracle Database Setup")
    print("=" * 60)
    
    try:
        # Connect as SYS with SYSDBA
        dsn = oracledb.makedsn(host, port, service_name=service)
        connection = oracledb.connect(
            user="SYS",
            password=password,
            dsn=dsn,
            mode=oracledb.AUTH_MODE_SYSDBA
        )
        cursor = connection.cursor()
        print("✓ Connected to Oracle as SYS")
        
        # Check if EMAIL_REMINDERS table exists
        cursor.execute(f"""
            SELECT COUNT(*) FROM ALL_TABLES 
            WHERE OWNER = 'MSMM DASHBOARD' AND TABLE_NAME = 'EMAIL_REMINDERS'
        """)
        table_exists = cursor.fetchone()[0]
        
        if not table_exists:
            print("\nCreating EMAIL_REMINDERS table...")
            cursor.execute(f"""
                CREATE TABLE "{schema}".EMAIL_REMINDERS (
                    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    LICENSE_ID NUMBER NOT NULL,
                    REMINDER_TYPE VARCHAR2(50),
                    SENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    EMAIL_TO VARCHAR2(500),
                    EMAIL_SUBJECT VARCHAR2(500),
                    EMAIL_BODY CLOB,
                    STATUS VARCHAR2(50) DEFAULT 'sent',
                    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Create indexes
            cursor.execute(f"""
                CREATE INDEX IDX_EMAIL_REM_LICENSE_ID 
                ON "{schema}".EMAIL_REMINDERS(LICENSE_ID)
            """)
            cursor.execute(f"""
                CREATE INDEX IDX_EMAIL_REM_SENT_DATE 
                ON "{schema}".EMAIL_REMINDERS(SENT_DATE)
            """)
            
            connection.commit()
            print("✓ EMAIL_REMINDERS table created")
        else:
            print("✓ EMAIL_REMINDERS table already exists")
        
        # Check if EMAIL_ENABLED column exists in LICENSES table
        cursor.execute(f"""
            SELECT COUNT(*) FROM ALL_TAB_COLUMNS 
            WHERE OWNER = 'MSMM DASHBOARD' 
            AND TABLE_NAME = 'LICENSES' 
            AND COLUMN_NAME = 'EMAIL_ENABLED'
        """)
        col_exists = cursor.fetchone()[0]
        
        if not col_exists:
            print("\nAdding EMAIL_ENABLED column to LICENSES table...")
            cursor.execute(f"""
                ALTER TABLE "{schema}".LICENSES 
                ADD EMAIL_ENABLED NUMBER(1) DEFAULT 1
            """)
            connection.commit()
            print("✓ EMAIL_ENABLED column added")
        else:
            print("✓ EMAIL_ENABLED column already exists")
        
        # Create or replace views
        print("\nCreating/updating views...")
        
        # 1. LICENSES_NEEDING_REMINDERS view
        cursor.execute(f"""
            CREATE OR REPLACE VIEW "{schema}".LICENSES_NEEDING_REMINDERS AS
            WITH reminder_status AS (
                SELECT 
                    l.LIC_ID as id,
                    l.LIC_NAME as lic_name,
                    l.LIC_TYPE as lic_type,
                    l.LIC_STATE as lic_state,
                    l.EXPIRATION_DATE as expiration_date,
                    l.LIC_NOTIFY_NAMES as lic_notify_names,
                    NVL(l.EMAIL_ENABLED, 1) as email_enabled,
                    TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) as days_until_expiration,
                    CASE 
                        WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 60 THEN '60_days'
                        WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 30 THEN '30_days'
                        WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 15 THEN '15_days'
                        WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 7 THEN '7_days'
                        WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) = 1 THEN '1_day'
                        WHEN l.EXPIRATION_DATE < SYSDATE THEN 'overdue_daily'
                        ELSE NULL
                    END as reminder_type
                FROM "{schema}".LICENSES l
                WHERE l.EXPIRATION_DATE IS NOT NULL
                    AND l.LIC_NOTIFY_NAMES IS NOT NULL
                    AND LENGTH(TRIM(l.LIC_NOTIFY_NAMES)) > 0
                    AND NVL(l.EMAIL_ENABLED, 1) = 1
                    AND (
                        TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) IN (60, 30, 15, 7, 1)
                        OR l.EXPIRATION_DATE < SYSDATE
                    )
            ),
            recent_reminders AS (
                SELECT 
                    er.LICENSE_ID,
                    er.REMINDER_TYPE,
                    MAX(er.SENT_DATE) as last_sent_date
                FROM "{schema}".EMAIL_REMINDERS er
                WHERE TRUNC(er.SENT_DATE) >= TRUNC(SYSDATE) - 7
                GROUP BY er.LICENSE_ID, er.REMINDER_TYPE
            )
            SELECT 
                rs.id,
                rs.lic_name,
                rs.lic_type,
                rs.lic_state,
                rs.expiration_date,
                rs.lic_notify_names,
                rs.email_enabled,
                rs.days_until_expiration,
                rs.reminder_type
            FROM reminder_status rs
            LEFT JOIN recent_reminders rr 
                ON rs.id = rr.LICENSE_ID 
                AND rs.reminder_type = rr.REMINDER_TYPE
                AND (
                    (rs.reminder_type IN ('60_days', '30_days', '15_days', '7_days', '1_day') 
                     AND TRUNC(rr.last_sent_date) = TRUNC(SYSDATE))
                    OR 
                    (rs.reminder_type = 'overdue_daily' 
                     AND TRUNC(rr.last_sent_date) = TRUNC(SYSDATE))
                )
            WHERE rr.LICENSE_ID IS NULL
            ORDER BY rs.days_until_expiration, rs.lic_name
        """)
        print("✓ LICENSES_NEEDING_REMINDERS view created")
        
        # 2. OVERDUE_LICENSES view
        cursor.execute(f"""
            CREATE OR REPLACE VIEW "{schema}".OVERDUE_LICENSES AS
            SELECT 
                l.LIC_ID as id,
                l.LIC_NAME as lic_name,
                l.LIC_STATE as lic_state,
                l.LIC_TYPE as lic_type,
                l.LIC_NO as lic_no,
                l.ASCEM_NO as ascem_no,
                l.FIRST_ISSUE_DATE as first_issue_date,
                l.EXPIRATION_DATE as expiration_date,
                l.LIC_NOTIFY_NAMES as lic_notify_names,
                SYSDATE as created_at,
                SYSDATE as updated_at,
                TRUNC(SYSDATE) - TRUNC(l.EXPIRATION_DATE) as days_overdue
            FROM "{schema}".LICENSES l
            WHERE l.EXPIRATION_DATE IS NOT NULL
                AND l.EXPIRATION_DATE < SYSDATE
            ORDER BY l.EXPIRATION_DATE
        """)
        print("✓ OVERDUE_LICENSES view created")
        
        # 3. UPCOMING_EXPIRATIONS view
        cursor.execute(f"""
            CREATE OR REPLACE VIEW "{schema}".UPCOMING_EXPIRATIONS AS
            SELECT 
                l.LIC_ID as id,
                l.LIC_NAME as lic_name,
                l.LIC_STATE as lic_state,
                l.LIC_TYPE as lic_type,
                l.LIC_NO as lic_no,
                l.ASCEM_NO as ascem_no,
                l.FIRST_ISSUE_DATE as first_issue_date,
                l.EXPIRATION_DATE as expiration_date,
                l.LIC_NOTIFY_NAMES as lic_notify_names,
                SYSDATE as created_at,
                SYSDATE as updated_at,
                TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) as days_until_expiration,
                CASE 
                    WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) <= 10 THEN 'critical'
                    WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) <= 30 THEN 'warning'
                    WHEN TRUNC(l.EXPIRATION_DATE) - TRUNC(SYSDATE) <= 60 THEN 'upcoming'
                    ELSE 'normal'
                END as status_category
            FROM "{schema}".LICENSES l
            WHERE l.EXPIRATION_DATE IS NOT NULL
                AND l.EXPIRATION_DATE >= SYSDATE
                AND l.EXPIRATION_DATE <= SYSDATE + 90
            ORDER BY l.EXPIRATION_DATE
        """)
        print("✓ UPCOMING_EXPIRATIONS view created")
        
        connection.commit()
        
        # Verify the setup
        print("\n" + "=" * 60)
        print("Setup Verification:")
        print("-" * 60)
        
        # Check LICENSES table
        cursor.execute(f'SELECT COUNT(*) FROM "{schema}".LICENSES')
        print(f"✓ LICENSES table: {cursor.fetchone()[0]} rows")
        
        # Check EMAIL_REMINDERS table
        cursor.execute(f'SELECT COUNT(*) FROM "{schema}".EMAIL_REMINDERS')
        print(f"✓ EMAIL_REMINDERS table: {cursor.fetchone()[0]} rows")
        
        # Check views
        for view in ['LICENSES_NEEDING_REMINDERS', 'OVERDUE_LICENSES', 'UPCOMING_EXPIRATIONS']:
            cursor.execute(f'SELECT COUNT(*) FROM "{schema}".{view}')
            count = cursor.fetchone()[0]
            print(f"✓ {view}: {count} rows")
        
        cursor.close()
        connection.close()
        
        print("\n" + "=" * 60)
        print("✅ Oracle database setup completed successfully!")
        print("=" * 60)
        
        return True
        
    except oracledb.Error as e:
        print(f"\n✗ Oracle Error: {e}")
        return False
    except Exception as e:
        print(f"\n✗ Error: {e}")
        return False


if __name__ == "__main__":
    setup_oracle_database()